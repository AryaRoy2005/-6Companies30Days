class Solution {
    public boolean boxCheck(char board[][], int sr,int er,int sc,int ec){
        HashSet<Character> map = new HashSet<>();

        for(int i = sr; i<=er; i++){
            for(int j = sc; j<=ec; j++){
                if(board[i][j]=='.'){
                    continue; 
                }
                
                if(map.contains(board[i][j])){
                    return false; 
                }
                map.add(board[i][j]); 
            }
        }
        return true; 
    }

    public boolean isValidSudoku(char[][] board) {

        HashSet<Character> map; 
        
        for(int i = 0; i<9; i++){
            map = new HashSet<>();
            for(int j = 0; j<9; j++){
                if(board[i][j]=='.'){
                    continue; 
                }
               
                if(map.contains(board[i][j])){
                    return false; 
                }
                map.add(board[i][j]); 
            }
        }


        for(int j = 0; j<9; j++){
            
            map = new HashSet<>();
            for(int i = 0; i<9; i++){
                if(board[i][j]=='.'){
                    continue; 
                }
                
                if(map.contains(board[i][j])){
                    return false; 
                }
                map.add(board[i][j]); 
            }
        }

        int boxCount = 0; 
        for(int sr = 0, er = 2, sc = 0, ec = 2; boxCount<9; boxCount++){ 
            
            if(!boxCheck(board, sr, er, sc, ec)){
                return false; 
            } 
            sc+=3; 
            ec+=3; 
            if(ec>=9){
                sc = 0; 
                ec = 2; 
                sr+=3; 
                er+=3; 
            }
        }
        return true; 
    }
}
